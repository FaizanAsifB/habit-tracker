/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as websiteIndexImport } from './routes/(website)/index'
import { Route as AppNotFoundImport } from './routes/app/not-found'
import { Route as AppTasksIndexImport } from './routes/app/tasks/index'
import { Route as AppSettingsIndexImport } from './routes/app/settings/index'
import { Route as AppProgressAndAnalyticsIndexImport } from './routes/app/progress-and-analytics/index'
import { Route as AppHabitsIndexImport } from './routes/app/habits/index'
import { Route as AppGoalsIndexImport } from './routes/app/goals/index'
import { Route as AppDashboardIndexImport } from './routes/app/dashboard/index'
import { Route as AppCalendarIndexImport } from './routes/app/calendar/index'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const websiteIndexRoute = websiteIndexImport.update({
  id: '/(website)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppNotFoundRoute = AppNotFoundImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppTasksIndexRoute = AppTasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppSettingsIndexRoute = AppSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppProgressAndAnalyticsIndexRoute =
  AppProgressAndAnalyticsIndexImport.update({
    id: '/progress-and-analytics/',
    path: '/progress-and-analytics/',
    getParentRoute: () => AppRouteRoute,
  } as any)

const AppHabitsIndexRoute = AppHabitsIndexImport.update({
  id: '/habits/',
  path: '/habits/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppGoalsIndexRoute = AppGoalsIndexImport.update({
  id: '/goals/',
  path: '/goals/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppDashboardIndexRoute = AppDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppCalendarIndexRoute = AppCalendarIndexImport.update({
  id: '/calendar/',
  path: '/calendar/',
  getParentRoute: () => AppRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/not-found': {
      id: '/app/not-found'
      path: '/not-found'
      fullPath: '/app/not-found'
      preLoaderRoute: typeof AppNotFoundImport
      parentRoute: typeof AppRouteImport
    }
    '/(website)/': {
      id: '/(website)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof websiteIndexImport
      parentRoute: typeof rootRoute
    }
    '/app/calendar/': {
      id: '/app/calendar/'
      path: '/calendar'
      fullPath: '/app/calendar'
      preLoaderRoute: typeof AppCalendarIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/dashboard/': {
      id: '/app/dashboard/'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/goals/': {
      id: '/app/goals/'
      path: '/goals'
      fullPath: '/app/goals'
      preLoaderRoute: typeof AppGoalsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/habits/': {
      id: '/app/habits/'
      path: '/habits'
      fullPath: '/app/habits'
      preLoaderRoute: typeof AppHabitsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/progress-and-analytics/': {
      id: '/app/progress-and-analytics/'
      path: '/progress-and-analytics'
      fullPath: '/app/progress-and-analytics'
      preLoaderRoute: typeof AppProgressAndAnalyticsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/settings/': {
      id: '/app/settings/'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/tasks/': {
      id: '/app/tasks/'
      path: '/tasks'
      fullPath: '/app/tasks'
      preLoaderRoute: typeof AppTasksIndexImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppNotFoundRoute: typeof AppNotFoundRoute
  AppCalendarIndexRoute: typeof AppCalendarIndexRoute
  AppDashboardIndexRoute: typeof AppDashboardIndexRoute
  AppGoalsIndexRoute: typeof AppGoalsIndexRoute
  AppHabitsIndexRoute: typeof AppHabitsIndexRoute
  AppProgressAndAnalyticsIndexRoute: typeof AppProgressAndAnalyticsIndexRoute
  AppSettingsIndexRoute: typeof AppSettingsIndexRoute
  AppTasksIndexRoute: typeof AppTasksIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppNotFoundRoute: AppNotFoundRoute,
  AppCalendarIndexRoute: AppCalendarIndexRoute,
  AppDashboardIndexRoute: AppDashboardIndexRoute,
  AppGoalsIndexRoute: AppGoalsIndexRoute,
  AppHabitsIndexRoute: AppHabitsIndexRoute,
  AppProgressAndAnalyticsIndexRoute: AppProgressAndAnalyticsIndexRoute,
  AppSettingsIndexRoute: AppSettingsIndexRoute,
  AppTasksIndexRoute: AppTasksIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteRouteWithChildren
  '/app/not-found': typeof AppNotFoundRoute
  '/': typeof websiteIndexRoute
  '/app/calendar': typeof AppCalendarIndexRoute
  '/app/dashboard': typeof AppDashboardIndexRoute
  '/app/goals': typeof AppGoalsIndexRoute
  '/app/habits': typeof AppHabitsIndexRoute
  '/app/progress-and-analytics': typeof AppProgressAndAnalyticsIndexRoute
  '/app/settings': typeof AppSettingsIndexRoute
  '/app/tasks': typeof AppTasksIndexRoute
}

export interface FileRoutesByTo {
  '/app': typeof AppRouteRouteWithChildren
  '/app/not-found': typeof AppNotFoundRoute
  '/': typeof websiteIndexRoute
  '/app/calendar': typeof AppCalendarIndexRoute
  '/app/dashboard': typeof AppDashboardIndexRoute
  '/app/goals': typeof AppGoalsIndexRoute
  '/app/habits': typeof AppHabitsIndexRoute
  '/app/progress-and-analytics': typeof AppProgressAndAnalyticsIndexRoute
  '/app/settings': typeof AppSettingsIndexRoute
  '/app/tasks': typeof AppTasksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/not-found': typeof AppNotFoundRoute
  '/(website)/': typeof websiteIndexRoute
  '/app/calendar/': typeof AppCalendarIndexRoute
  '/app/dashboard/': typeof AppDashboardIndexRoute
  '/app/goals/': typeof AppGoalsIndexRoute
  '/app/habits/': typeof AppHabitsIndexRoute
  '/app/progress-and-analytics/': typeof AppProgressAndAnalyticsIndexRoute
  '/app/settings/': typeof AppSettingsIndexRoute
  '/app/tasks/': typeof AppTasksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/app/not-found'
    | '/'
    | '/app/calendar'
    | '/app/dashboard'
    | '/app/goals'
    | '/app/habits'
    | '/app/progress-and-analytics'
    | '/app/settings'
    | '/app/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/app'
    | '/app/not-found'
    | '/'
    | '/app/calendar'
    | '/app/dashboard'
    | '/app/goals'
    | '/app/habits'
    | '/app/progress-and-analytics'
    | '/app/settings'
    | '/app/tasks'
  id:
    | '__root__'
    | '/app'
    | '/app/not-found'
    | '/(website)/'
    | '/app/calendar/'
    | '/app/dashboard/'
    | '/app/goals/'
    | '/app/habits/'
    | '/app/progress-and-analytics/'
    | '/app/settings/'
    | '/app/tasks/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  websiteIndexRoute: typeof websiteIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  websiteIndexRoute: websiteIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app",
        "/(website)/"
      ]
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/not-found",
        "/app/calendar/",
        "/app/dashboard/",
        "/app/goals/",
        "/app/habits/",
        "/app/progress-and-analytics/",
        "/app/settings/",
        "/app/tasks/"
      ]
    },
    "/app/not-found": {
      "filePath": "app/not-found.tsx",
      "parent": "/app"
    },
    "/(website)/": {
      "filePath": "(website)/index.tsx"
    },
    "/app/calendar/": {
      "filePath": "app/calendar/index.tsx",
      "parent": "/app"
    },
    "/app/dashboard/": {
      "filePath": "app/dashboard/index.tsx",
      "parent": "/app"
    },
    "/app/goals/": {
      "filePath": "app/goals/index.tsx",
      "parent": "/app"
    },
    "/app/habits/": {
      "filePath": "app/habits/index.tsx",
      "parent": "/app"
    },
    "/app/progress-and-analytics/": {
      "filePath": "app/progress-and-analytics/index.tsx",
      "parent": "/app"
    },
    "/app/settings/": {
      "filePath": "app/settings/index.tsx",
      "parent": "/app"
    },
    "/app/tasks/": {
      "filePath": "app/tasks/index.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
