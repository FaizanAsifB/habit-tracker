/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as websiteIndexImport } from './routes/(website)/index'
import { Route as AppLayoutImport } from './routes/app/_layout'
import { Route as AppLayoutTasksImport } from './routes/app/_layout/tasks'
import { Route as AppLayoutSettingsImport } from './routes/app/_layout/settings'
import { Route as AppLayoutProgressAnalyticsImport } from './routes/app/_layout/progress-analytics'
import { Route as AppLayoutNotFoundImport } from './routes/app/_layout/not-found'
import { Route as AppLayoutHabitsImport } from './routes/app/_layout/habits'
import { Route as AppLayoutGoalsImport } from './routes/app/_layout/goals'
import { Route as AppLayoutDashboardImport } from './routes/app/_layout/dashboard'
import { Route as AppLayoutCalendarImport } from './routes/app/_layout/calendar'

// Create Virtual Routes

const AppImport = createFileRoute('/app')()

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const websiteIndexRoute = websiteIndexImport.update({
  id: '/(website)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppLayoutRoute = AppLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AppRoute,
} as any)

const AppLayoutTasksRoute = AppLayoutTasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutSettingsRoute = AppLayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutProgressAnalyticsRoute = AppLayoutProgressAnalyticsImport.update(
  {
    id: '/progress-analytics',
    path: '/progress-analytics',
    getParentRoute: () => AppLayoutRoute,
  } as any,
)

const AppLayoutNotFoundRoute = AppLayoutNotFoundImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutHabitsRoute = AppLayoutHabitsImport.update({
  id: '/habits',
  path: '/habits',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutGoalsRoute = AppLayoutGoalsImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutDashboardRoute = AppLayoutDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutCalendarRoute = AppLayoutCalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => AppLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/app/_layout': {
      id: '/app/_layout'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppLayoutImport
      parentRoute: typeof AppRoute
    }
    '/(website)/': {
      id: '/(website)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof websiteIndexImport
      parentRoute: typeof rootRoute
    }
    '/app/_layout/calendar': {
      id: '/app/_layout/calendar'
      path: '/calendar'
      fullPath: '/app/calendar'
      preLoaderRoute: typeof AppLayoutCalendarImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/dashboard': {
      id: '/app/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppLayoutDashboardImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/goals': {
      id: '/app/_layout/goals'
      path: '/goals'
      fullPath: '/app/goals'
      preLoaderRoute: typeof AppLayoutGoalsImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/habits': {
      id: '/app/_layout/habits'
      path: '/habits'
      fullPath: '/app/habits'
      preLoaderRoute: typeof AppLayoutHabitsImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/not-found': {
      id: '/app/_layout/not-found'
      path: '/not-found'
      fullPath: '/app/not-found'
      preLoaderRoute: typeof AppLayoutNotFoundImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/progress-analytics': {
      id: '/app/_layout/progress-analytics'
      path: '/progress-analytics'
      fullPath: '/app/progress-analytics'
      preLoaderRoute: typeof AppLayoutProgressAnalyticsImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/settings': {
      id: '/app/_layout/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppLayoutSettingsImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/tasks': {
      id: '/app/_layout/tasks'
      path: '/tasks'
      fullPath: '/app/tasks'
      preLoaderRoute: typeof AppLayoutTasksImport
      parentRoute: typeof AppLayoutImport
    }
  }
}

// Create and export the route tree

interface AppLayoutRouteChildren {
  AppLayoutCalendarRoute: typeof AppLayoutCalendarRoute
  AppLayoutDashboardRoute: typeof AppLayoutDashboardRoute
  AppLayoutGoalsRoute: typeof AppLayoutGoalsRoute
  AppLayoutHabitsRoute: typeof AppLayoutHabitsRoute
  AppLayoutNotFoundRoute: typeof AppLayoutNotFoundRoute
  AppLayoutProgressAnalyticsRoute: typeof AppLayoutProgressAnalyticsRoute
  AppLayoutSettingsRoute: typeof AppLayoutSettingsRoute
  AppLayoutTasksRoute: typeof AppLayoutTasksRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutCalendarRoute: AppLayoutCalendarRoute,
  AppLayoutDashboardRoute: AppLayoutDashboardRoute,
  AppLayoutGoalsRoute: AppLayoutGoalsRoute,
  AppLayoutHabitsRoute: AppLayoutHabitsRoute,
  AppLayoutNotFoundRoute: AppLayoutNotFoundRoute,
  AppLayoutProgressAnalyticsRoute: AppLayoutProgressAnalyticsRoute,
  AppLayoutSettingsRoute: AppLayoutSettingsRoute,
  AppLayoutTasksRoute: AppLayoutTasksRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AppRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/app': typeof AppLayoutRouteWithChildren
  '/': typeof websiteIndexRoute
  '/app/calendar': typeof AppLayoutCalendarRoute
  '/app/dashboard': typeof AppLayoutDashboardRoute
  '/app/goals': typeof AppLayoutGoalsRoute
  '/app/habits': typeof AppLayoutHabitsRoute
  '/app/not-found': typeof AppLayoutNotFoundRoute
  '/app/progress-analytics': typeof AppLayoutProgressAnalyticsRoute
  '/app/settings': typeof AppLayoutSettingsRoute
  '/app/tasks': typeof AppLayoutTasksRoute
}

export interface FileRoutesByTo {
  '/app': typeof AppLayoutRouteWithChildren
  '/': typeof websiteIndexRoute
  '/app/calendar': typeof AppLayoutCalendarRoute
  '/app/dashboard': typeof AppLayoutDashboardRoute
  '/app/goals': typeof AppLayoutGoalsRoute
  '/app/habits': typeof AppLayoutHabitsRoute
  '/app/not-found': typeof AppLayoutNotFoundRoute
  '/app/progress-analytics': typeof AppLayoutProgressAnalyticsRoute
  '/app/settings': typeof AppLayoutSettingsRoute
  '/app/tasks': typeof AppLayoutTasksRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRouteWithChildren
  '/app/_layout': typeof AppLayoutRouteWithChildren
  '/(website)/': typeof websiteIndexRoute
  '/app/_layout/calendar': typeof AppLayoutCalendarRoute
  '/app/_layout/dashboard': typeof AppLayoutDashboardRoute
  '/app/_layout/goals': typeof AppLayoutGoalsRoute
  '/app/_layout/habits': typeof AppLayoutHabitsRoute
  '/app/_layout/not-found': typeof AppLayoutNotFoundRoute
  '/app/_layout/progress-analytics': typeof AppLayoutProgressAnalyticsRoute
  '/app/_layout/settings': typeof AppLayoutSettingsRoute
  '/app/_layout/tasks': typeof AppLayoutTasksRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/'
    | '/app/calendar'
    | '/app/dashboard'
    | '/app/goals'
    | '/app/habits'
    | '/app/not-found'
    | '/app/progress-analytics'
    | '/app/settings'
    | '/app/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/app'
    | '/'
    | '/app/calendar'
    | '/app/dashboard'
    | '/app/goals'
    | '/app/habits'
    | '/app/not-found'
    | '/app/progress-analytics'
    | '/app/settings'
    | '/app/tasks'
  id:
    | '__root__'
    | '/app'
    | '/app/_layout'
    | '/(website)/'
    | '/app/_layout/calendar'
    | '/app/_layout/dashboard'
    | '/app/_layout/goals'
    | '/app/_layout/habits'
    | '/app/_layout/not-found'
    | '/app/_layout/progress-analytics'
    | '/app/_layout/settings'
    | '/app/_layout/tasks'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  websiteIndexRoute: typeof websiteIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  websiteIndexRoute: websiteIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app",
        "/(website)/"
      ]
    },
    "/app": {
      "filePath": "app",
      "children": [
        "/app/_layout"
      ]
    },
    "/app/_layout": {
      "filePath": "app/_layout.tsx",
      "parent": "/app",
      "children": [
        "/app/_layout/calendar",
        "/app/_layout/dashboard",
        "/app/_layout/goals",
        "/app/_layout/habits",
        "/app/_layout/not-found",
        "/app/_layout/progress-analytics",
        "/app/_layout/settings",
        "/app/_layout/tasks"
      ]
    },
    "/(website)/": {
      "filePath": "(website)/index.tsx"
    },
    "/app/_layout/calendar": {
      "filePath": "app/_layout/calendar.tsx",
      "parent": "/app/_layout"
    },
    "/app/_layout/dashboard": {
      "filePath": "app/_layout/dashboard.tsx",
      "parent": "/app/_layout"
    },
    "/app/_layout/goals": {
      "filePath": "app/_layout/goals.tsx",
      "parent": "/app/_layout"
    },
    "/app/_layout/habits": {
      "filePath": "app/_layout/habits.tsx",
      "parent": "/app/_layout"
    },
    "/app/_layout/not-found": {
      "filePath": "app/_layout/not-found.tsx",
      "parent": "/app/_layout"
    },
    "/app/_layout/progress-analytics": {
      "filePath": "app/_layout/progress-analytics.tsx",
      "parent": "/app/_layout"
    },
    "/app/_layout/settings": {
      "filePath": "app/_layout/settings.tsx",
      "parent": "/app/_layout"
    },
    "/app/_layout/tasks": {
      "filePath": "app/_layout/tasks.tsx",
      "parent": "/app/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
